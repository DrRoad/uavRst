% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rs_grassLiDAR.R
\name{r_in_lidar}
\alias{r_in_lidar}
\title{wraps the r.in.lidar tool}
\usage{
r_in_lidar(input = NULL, output = NULL, file = NULL, method = NULL,
  type = NULL, base_raster = NULL, zrange = NULL, zscale = NULL,
  intensity_range = NULL, intensity_scale = NULL, percent = NULL,
  pth = NULL, trim = NULL, resolution = NULL, return_filter = NULL,
  class_filter = NULL, flags = c("e", "n", "overwrite", "o"))
}
\arguments{
\item{r.in.lidar}{[-penosgijdv]}

\item{input=name}{LAS input file LiDAR input files in LAS format (*.las or *.laz)}

\item{output=name}{Name for output raster map}

\item{file=name}{File containing names of LAS input files LiDAR input files in LAS format (*.las or *.laz)}

\item{method=string}{Statistic to use for raster values Options: n, min, max, range, sum, mean, stddev, variance, coeff_var, median, percentile, skewness, trimmean Default: mean}

\item{n:}{Number of points in cell}

\item{min:}{Minimum value of point values in cell}

\item{max:}{Maximum value of point values in cell}

\item{range:}{Range of point values in cell}

\item{sum:}{Sum of point values in cell}

\item{mean:}{Mean (average) value of point values in cell}

\item{stddev:}{Standard deviation of point values in cell}

\item{variance:}{Variance of point values in cell}

\item{coeff_var:}{Coefficient of variance of point values in cell}

\item{median:}{Median value of point values in cell}

\item{percentile:}{pth (nth) percentile of point values in cell}

\item{skewness:}{Skewness of point values in cell}

\item{trimmean:}{Trimmed mean of point values in cell}

\item{type=string}{Type of raster map to be created Storage type for resultant raster map Options: CELL, FCELL, DCELL Default: FCELL}

\item{CELL:}{Integer}

\item{FCELL:}{Single precision floating point}

\item{DCELL:}{Double precision floating point}

\item{base_raster=name}{Subtract raster values from the Z coordinates The scale for Z is applied beforehand, the range filter for Z afterwards}

\item{zrange=min, max}{Filter range for Z data (min,max) Applied after base_raster transformation step}

\item{zscale=float}{Scale to apply to Z data  Default: 1.0}

\item{intensity_range=min, max}{Filter range for intensity values (min,max) intensity_scale=float Scale to apply to intensity values Default: 1.0}

\item{percent=integer}{Percent of map to keep in memory Options: 1-100 Default: 100}

\item{pth=integer}{pth percentile of the values Options: 1-100}

\item{trim=float}{Discard given percentage of the smallest and largest values Discard <trim> percent of the smallest and <trim> percent of the largest observations Options: 0-50}

\item{resolution=float}{Output raster resolution}

\item{return_filter=string}{Only import points of selected return type If not specified, all points are imported Options: first, last, mid}

\item{class_filter=integer[, integer, ...]}{Only import points of selected class(es) Input is comma separated integers. If not specified, all points are imported.}

\item{-p}{Print LAS file info and exit}

\item{-e}{Use the extent of the input for the raster extent Set internally computational region extents based on the point cloud}

\item{-n}{Set computation region to match the new raster map Set computation region to match the 2D extent and resolution of the newly created new raster map}

\item{-o}{Override projection check (use current location's projection) Assume that the dataset has same projection as the current location}

\item{-s}{Scan data file for extent then exit}

\item{-g}{In scan mode, print using shell script style}

\item{-i}{Use intensity values rather than Z values Uses intensity values everywhere as if they would be Z coordinates}

\item{-j}{Use Z values for filtering, but intensity values for statistics}

\item{-d}{Use base raster resolution instead of computational region For getting values from base raster, use its actual resolution instead of computational region resolution}

\item{-v}{Use only valid points Points invalid according to APSRS LAS specification will be filtered out}
}
\description{
Creates raster* objects from a LiDAR derived  point cloud based on regular las formatted data files
}
\examples{
\dontrun{
# create a DEM based on the class 2 Minimum returns
require(curl)
# get a laz file from Mr. Isenburg
res <- curl::curl_download(url="http://www.cs.unc.edu/~isenburg/lastools/download/test/s1885565.laz",
                           destfile="test.laz",  quiet = TRUE, mode = "wb")
# convert it to las
lasTool(tool="las2las","test.laz")
# extract extension for setting up GRASS region
ext<-lasTool(lasDir = "test.las")
# set up GRASS
result<-link2GI::linkGRASS7(spatial_params = c(ext[2],ext[1],ext[4],ext[3],proj4),resolution = gridsize)
# use the r.in.lidar tool to generate a pseudo surface model
r_in_lidar(input = paste0(getwd(),"/test.las"),
           output = "testdem",
           method = "min",
           resolution = 10,
           class_filter = 2)
}

}
\author{
Chris Reudenbach,Thomas Nauss, Jannis Gottwald
}
